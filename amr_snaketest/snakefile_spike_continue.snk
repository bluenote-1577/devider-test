import yaml
out_dir = "results_spike_dbghap"
algo = ['dbghaplo']
# Load the config file
with open("./auto_config_megares_deduplicated_for_spike.yaml", "r") as f:
    config = yaml.safe_load(f)

# List of instances
args = [x['arg'] for x in config['instances']]
db = "./clean_megares.fasta"
spike_reads = "./19122017_mousegut_pacbio_scaffolds/2018.02.13_14.02.01_sample_0/reads/anonymous_reads.fq"

rule all:
    input:
        #expand("floria_{arg}", arg=args),
        #expand("tagged_{arg}", arg=args)
        expand("results_spike_dbghap/{arg}_{alg}/results_spike.txt", arg=args, alg=algo),
        expand("results_spike_dbghap/{arg}_{alg}/results_spike.bam", arg=args, alg=algo),


rule cat_refs:
    input:
        expand("data_spike/{genome}.fasta", genome=args)
    output:
        "data_spike/cat_ref.fasta"
    run:
        shell("cat {input} > {output}")


for instance in config['instances']:
        
    rule:
        name: f"run_dbghaplo_{instance['arg']}"
        input:
            bam = expand("data_spike/{arg}.bam", arg=instance['arg']),
            vcf = expand("data_spike/{arg}.vcf.gz", arg=instance['arg'])
        output:
            expand(out_dir + "/{arg}_dbghaplo/results_spike.txt", arg=instance['arg'])
        params:
            ref_genome = db,
            out = expand(out_dir + "/{arg}_dbghaplo", arg=instance['arg']),
            time_file = expand("benchmarks/{arg}_dbghaplo.benchmark.usrbintime", arg=instance['arg'])
        threads:
            1
        shell:
            """
            /usr/bin/time -v -o {params.time_file} devider -b {input.bam} -v {input.vcf} -o {params.out} -t 1 -r {params.ref_genome} --overwrite;
            cp {params.out}/majority_vote_haplotypes.fasta {output}
            """

    rule:
        name: f"results_spike_to_bam_{instance['arg']}"
        input:
            expand("results_spike_dbghap/{arg}_{alg}/results_spike.txt", arg=instance['arg'], alg=algo),
        output:
            expand("results_spike_dbghap/{arg}_{alg}/results_spike.bam", arg=instance['arg'], alg=algo),
        params: 
            ref_genome = 'data_spike/' + instance['arg'] + '.fasta'
        run:
            for i in range(len(input)):
                shell(f"minimap2 --MD -a {params.ref_genome} {input[i]} | samtools sort -o {output[i]}; samtools index {output[i]}")

    
