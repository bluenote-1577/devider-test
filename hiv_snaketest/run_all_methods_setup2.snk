import os

# Load the configuration file
setup = 'setup2'
configfile: "config2.yaml"

# List of algorithms and output directory
#algorithms = ['cliqueSNV', 'igda', 'dbghaplo', 'rvhaplo']
#algorithms = ['cliqueSNV', 'dbghaplo', 'rvhaplo']
#algorithms = ['dbghaplo', 'igda']
algorithms = ['dbghaplo']
out_dir = "results"

# Helper function to generate combinations of input files
def generate_inputs():
    input_files = []

    # Generating all combinations of setup, algorithm, length, accuracy, and coverage
    for algorithm in algorithms:
        for setup in config.keys():
            #for length in config[setup]['lengths']:
            #    for accuracy in config[setup]['read_identities']:
            for num_strains in config[setup]['num_strains']:
                length = 9000
                accuracy = 95
                coverage = 160
                #input_files.append(f"{out_dir}/{setup}/{algorithm}_{length}_{accuracy}_{coverage}/results.txt")
                input_files.append(f"{out_dir}/{setup}/{algorithm}_{length}_{accuracy}_{coverage}_" + str(num_strains) + "/results.bam")
                #input_files.append(f"{out_dir}/{setup}/{num_strains}_true.vcf.gz")
                #input_files.append(f"{out_dir}/{setup}/{num_strains}_true.bam")
    return input_files


# Rule all defines all the final outputs
rule all:
    input:
        generate_inputs()

rule:
    name: f"clean_genome_{setup}"
    input:
        config[setup]['ref_genome']
    output:
        config[setup]['ref_genome'] + ".cleaned.fa"
    conda:
        "envs/igda.yaml"
    shell:
        """
        fasta2upper {input} {input}.cleaned;
        fastaclean {input}.cleaned {output}; 
        
        """


# Specific rule for dbghaplo
for num_str in config[setup]['num_strains']:
    rule:
        name: f"get_bams_{setup}_{num_str}"
        input: 
            expand(
                "simulated_reads/{setup}/{genome_base}_{length}_{accuracy}_{coverage}.fastq",
                setup = setup,
                genome_base=config[setup]['genomes'][0:int(num_str)],
                length="{length}",
                accuracy="{accuracy}",
                coverage="{coverage}"
            )
        output: 
            out_dir + "/{setup}/{length}_{accuracy}_{coverage}_" + str(num_str) + ".bam"
        params: 
            ref_genome = config[setup]['ref_genome']
        threads:
            3
        shell:
            "minimap2 -a {params.ref_genome} {input} -t 3 | samtools sort -o {output}; samtools index {output}"
    
    rule:
        name: f"run_lofreq_{setup}_{num_str}"
        input:
            out_dir + "/{setup}/{length}_{accuracy}_{coverage}_" + str(num_str) + ".bam"
        output:
            out_dir + "/{setup}/{length}_{accuracy}_{coverage}_" + str(num_str) + ".vcf.gz" 
        params:
            ref_genome = config[setup]['ref_genome'],
            no_gzip = out_dir + "/{setup}/{length}_{accuracy}_{coverage}_" + str(num_str) + ".vcf",
            time_file = "benchmarks/{setup}/{length}_{accuracy}_{coverage}_" + str(num_str) + ".lofreq.benchmark.usrbintime"
        shell:
            "/usr/bin/time -v -o {params.time_file} ~/software/lofreq_star-2.1.4_linux-x86-64/bin/lofreq call -B -f {params.ref_genome} {input} -o {params.no_gzip} --force-overwrite;"
            "bgzip {params.no_gzip}; bcftools tabix -f {output}"

    rule:
        name: f"run_dbghaplo_{setup}_{num_str}"
        input:
            bam = out_dir + "/{setup}/{length}_{accuracy}_{coverage}_" + str(num_str) + ".bam",
            vcf = out_dir + "/{setup}/{length}_{accuracy}_{coverage}_" + str(num_str) + ".vcf.gz" 
        output:
            out_dir + "/{setup}/dbghaplo_{length}_{accuracy}_{coverage}_" + str(num_str) + "/results.txt"
        params:
            ref_genome = config[setup]['ref_genome'],
            out = out_dir + "/{setup}/dbghaplo_{length}_{accuracy}_{coverage}_" + str(num_str),
            time_file = "benchmarks/{setup}/dbghaplo_{length}_{accuracy}_{coverage}_" + str(num_str) + ".benchmark.usrbintime"
        threads:
            2
        shell:
            """
            /usr/bin/time -v -o {params.time_file} dbghaplo -b {input.bam} -v {input.vcf} -o {params.out} -t 2 -r {params.ref_genome} --overwrite;
            cp {params.out}/majority_vote_haplotypes.fasta {output}
            """

    # Specific rule for rvhaplo
    rule:
        name: f"run_rvhaplo_{setup}_{num_str}"
        input:
            out_dir + "/{setup}/{length}_{accuracy}_{coverage}_" + str(num_str) + ".bam"
        output:
            out_dir + "/{setup}/rvhaplo_{length}_{accuracy}_{coverage}_" + str(num_str) + "/results.txt"
        conda:
            "envs/rvhaplo.yaml"
        params:
            out = out_dir + "/{setup}/rvhaplo_{length}_{accuracy}_{coverage}_" + str(num_str),
            ref_genome = config[setup]['ref_genome'],
            time_file = "benchmarks/{setup}/rvhaplo_{length}_{accuracy}_{coverage}_" + str(num_str) + ".benchmark.usrbintime"
        threads:
            10 
        shell:
            """
            cd RVHaplo ; /usr/bin/time -v -o ../{params.time_file} ./rvhaplo.sh -i ../{input} -o ../{params.out} -r ../{params.ref_genome} -t 10;
            cd ..; mv {params.out}/*haplotypes.fasta {output}
            """

    # Specific rule for cliqueSNV
    rule:
        name: f"run_cliqueSNV_{setup}_{num_str}"
        input:
            #out_dir + "/{setup}/{length}_{accuracy}_{coverage}.bam"
            out_dir + "/{setup}/{length}_{accuracy}_{coverage}_" + str(num_str) + ".bam" 
        output:
            #out_dir + "/{setup}/cliqueSNV_{length}_{accuracy}_{coverage}/results.txt"
            out_dir + "/{setup}/cliqueSNV_{length}_{accuracy}_{coverage}_" + str(num_str) + "/results.txt"
        params:
            #out = out_dir + "/{setup}/cliqueSNV_{length}_{accuracy}_{coverage}",
            out = out_dir + "/{setup}/cliqueSNV_{length}_{accuracy}_{coverage}_" + str(num_str),
            ref_genome = config[setup]['ref_genome'],
            #time_file = "benchmarks/{setup}/cliqueSNV_{length}_{accuracy}_{coverage}.benchmark.usrbintime"
            time_file = "benchmarks/{setup}/cliqueSNV_{length}_{accuracy}_{coverage}_" + str(num_str) + ".benchmark.usrbintime"
        threads:
            10
        shell:
            """
            /usr/bin/time -v -o {params.time_file} java -jar clique-snv.jar -m snv-pacbio -in {input} -outDir {params.out} -threads 10;
            mv {params.out}/*.fasta {output}
            """ 
    
    rule:
        name: f"run_igda_{setup}_{num_str}"
        input:
            ref_gn= config[setup]['ref_genome'] + ".cleaned.fa", 
            #bam = out_dir + "/{setup}/{length}_{accuracy}_{coverage}.bam"
            bam = out_dir + "/{setup}/{length}_{accuracy}_{coverage}_" + str(num_str) + ".bam"
        output:
            #out_dir + "/{setup}/igda_{length}_{accuracy}_{coverage}/results.txt"
            out_dir + "/{setup}/igda_{length}_{accuracy}_{coverage}_" + str(num_str) + "/results.txt"
        conda:
            "envs/igda.yaml"
        params:
            #out = out_dir + "/{setup}/igda_{length}_{accuracy}_{coverage}",
            out = out_dir + "/{setup}/igda_{length}_{accuracy}_{coverage}_" + str(num_str),
            #time_file = "benchmarks/{setup}/igda_{length}_{accuracy}_{coverage}.benchmark.usrbintime"
            time_file = "benchmarks/{setup}/igda_{length}_{accuracy}_{coverage}_" + str(num_str) + ".benchmark.usrbintime"
        threads:
            10
        shell:
            """
            /usr/bin/time -v -o {params.time_file} /bin/sh -c '
            igda_align_ont {input.bam} {input.ref_gn} {params.out}.sam 10;
            sam2bam {params.out}.sam {params.out}.bam;
            igda_pipe_detect -m ont {params.out}.bam {input.ref_gn} ./igda_contextmodel/ont/ont_context_effect_read_qv_12_base_qv_12 {params.out}_igda_detect;
            rm -r {params.out};
            igda_pipe_phase -m ont -n 10 {params.out}_igda_detect {input.ref_gn} {params.out};
            cp {params.out}/*.fa {output}'
            """
    
    rule:
        name: f"results_to_bam_{setup}_{num_str}"
        input:
            expand(
                #out_dir + "/{setup}/{algo}_{length}_{accuracy}_{coverage}/results.txt",
                out_dir + "/{setup}/{algo}_{length}_{accuracy}_{coverage}_" + str(num_str) + "/results.txt",
                setup = setup,
                algo = algorithms,
                length="{length}",
                accuracy="{accuracy}",
                coverage="{coverage}"
            )
        output:
            expand(
                #out_dir + "/{setup}/{algo}_{length}_{accuracy}_{coverage}/results.bam",
                out_dir + "/{setup}/{algo}_{length}_{accuracy}_{coverage}_{nstr}/results.bam",
                setup = setup,
                algo = algorithms,
                length="{length}",
                accuracy="{accuracy}",
                coverage="{coverage}",
                nstr = str(num_str)
            )
        params: 
            ref_genome = config[setup]['ref_genome']
        run:
            for i in range(len(input)):
                shell(f"minimap2 --MD -a {params.ref_genome} {input[i]} | samtools sort -o {output[i]}; samtools index {output[i]}")


    rule:
        name: f"get_true_vcf_{num_str}"
        input: 
            genomes = expand("sfu_hivs/{genome}.1.fasta", genome=config[setup]['genomes'][0:int(num_str)]),
            ref_gn = config[setup]['ref_genome']
        output:
            vcf = "results/setup2/" + str(num_str) + "_true.vcf.gz",
            true_bam = "results/setup2/" + str(num_str) + "_true.bam"
        params:
            vcf_prior = "results/setup2/" + str(num_str) + "_true.vcf"
        shell:
            """
            minimap2 --MD -a  {input.ref_gn} {input.genomes} | samtools sort -o {output.true_bam}; samtools index {output.true_bam};
            python scripts/snps_from_bam_v2.py {output.true_bam} {input.ref_gn} {params.vcf_prior};
            bgzip {params.vcf_prior}; bcftools index {params.vcf_prior}.gz -f;
            """

